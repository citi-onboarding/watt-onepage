{"version":3,"sources":["components/Contato.js","App.js","serviceWorker.js","index.js"],"names":["Contato","props","callApi","a","axios","get","response","sendEmail","bind","handleNameChange","handleEmailChange","handleTelChange","handleAssuntoChange","handleMesageChange","state","nome","email","tel","assunto","mensagem","media_contato","email_contato","address_contato","phone_contato","imagem_contato","this","then","setState","data","media","address","phone","imagens","url","event","target","value","e","alert","preventDefault","post","status","mystyle","backgroundImage","backgroundSize","width","height","display","style","className","id","onSubmit","required","name","placeholder","onChange","type","Tel","cols","rows","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b6852c4e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\nimport './Contato.css';\n\n\nclass Contato extends Component {\n  constructor(props) {\n    super(props)\n    this.sendEmail = this.sendEmail.bind(this)\n    this.handleNameChange = this.handleNameChange.bind(this)\n    this.handleEmailChange = this.handleEmailChange.bind(this)\n    this.handleTelChange = this.handleTelChange.bind(this)\n    this.handleAssuntoChange = this.handleAssuntoChange.bind(this)\n    this.handleMesageChange = this.handleMesageChange.bind(this)\n\n    this.state = {\n      nome: '',\n      email: '',\n      tel: '',\n      assunto: '',\n      mensagem: '',\n      media_contato: '',\n      email_contato: '',\n      address_contato: '',\n      phone_contato: '',\n      imagem_contato: ''\n    };\n  }\n  componentDidMount() {\n    this.callApi()\n      .then((response) => this.setState({\n        media_contato: response.data[0].media,\n        email_contato: response.data[0].email,\n        address_contato: response.data[0].address,\n        phone_contato: response.data[0].phone,\n        imagem_contato: response.data[0].imagens[0].url\n      }))\n  }\n\n  callApi = async () => {\n    const response = await axios.get('http://localhost:3000/contato')\n    return response;\n  }\n\n  handleNameChange(event) {\n    this.setState({ nome: event.target.value });\n  }\n\n  handleEmailChange(event) {\n    this.setState({ email: event.target.value });\n  }\n  handleAssuntoChange(event) {\n    this.setState({ assunto: event.target.value });\n  }\n\n  handleMesageChange(event) {\n    this.setState({ mensagem: event.target.value });\n  }\n\n  handleTelChange(event) {\n    this.setState({ tel: event.target.value });\n  }\n\n\n  sendEmail(e) {\n    alert(\"aguarde a confirmação\")\n    e.preventDefault();\n    const nome = this.state.nome;\n    const email = this.state.email;\n    const tel = this.state.tel;\n    const assunto = this.state.assunto;\n    const mensagem = this.state.mensagem;\n    (async () => {\n      const res = await axios.post('http://localhost:3000/contato', {\n        nome: nome,\n        email: email,\n        tel: tel,\n        assunto: assunto,\n        mensagem: mensagem\n      }).then(function (response) {\n        if (response.status === 200) { alert(\"Enviado com sucesso\") }\n        else { alert(\"Erro ao enviar, tente novamente mais tarde\" + response.status) }\n      })\n    })()\n  }\n\n  render() {\n    const mystyle = {\n      backgroundImage: 'url(' + this.state.imagem_contato + ')',\n      backgroundSize: 'cover',\n      width: '100%',\n      height: '120vh',\n      display: 'flex',\n    }\n    return (\n      <>\n        <div style={mystyle}>\n          <div className=\"back-fade\">\n            <div className=\"box\">\n              <div className=\"coluna\" id=\"form-contato\">\n                <h1>Contato</h1>\n                <form onSubmit={this.sendEmail}>\n                  <div className=\"linha\">\n                    <div id=\"id-contato\" className=\"coluna id\">\n                      <input required name=\"nome\" placeholder=\"Nome\" onChange={this.handleNameChange} value={this.state.name} />\n                      <input required name=\"email\" placeholder=\"E-mail\" type='email' onChange={this.handleEmailChange} value={this.state.email} />\n                      <input required name=\"telefone\" placeholder=\"Telefone\" type='tel' onChange={this.handleTelChange} value={this.state.Tel} />\n\n                      <input required name=\"assunto\" placeholder=\"Assunto\" onChange={this.handleAssuntoChange} value={this.state.assunto} />\n                    </div>\n                    <div id=\"mes-contato\" className=\"coluna\">\n                      <textarea required name=\"mensagem\" placeholder=\"Mensagem\" cols=\"50\" rows=\"11\" onChange={this.handleMesageChange} value={this.state.mensagem}></textarea>\n                      <input id=\"button-contato\" type=\"submit\" value=\"Enviar\" />\n                    </div>\n                  </div>\n                </form>\n                <div className=\"coluna\" id=\"contato-info\">\n                  <small>{this.state.media_contato}</small>\n                  <small>{this.state.phone_contato}</small>\n                  <small>{this.state.email_contato}</small>\n                  <small>{this.state.address_contato}</small>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\nexport default Contato;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Contato from './components/Contato'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n\n    }\n  }\n\n  render() {\n    return (\n      <Contato />\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}