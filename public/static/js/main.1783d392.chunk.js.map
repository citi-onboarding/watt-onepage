{"version":3,"sources":["img.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","sendEmail","bind","handleNameChange","handleEmailChange","handleTelChange","handleAssuntoChange","handleMesageChange","state","name","email","tel","assunto","mensagem","a","axios","get","then","response","console","log","data","status","event","this","setState","target","value","nome","post","alert","mystyle","backgroundImage","logo","backgroundSize","width","height","display","alignItems","style","className","id","placeholder","onChange","type","Tel","cols","rows","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1783d392.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img.0aa2eb90.jpg\";","import React, { Component } from 'react';\nimport logo from './img.jpg';\nimport axios from 'axios'\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.sendEmail = this.sendEmail.bind(this)\n    this.handleNameChange = this.handleNameChange.bind(this)\n    this.handleEmailChange = this.handleEmailChange.bind(this)\n    this.handleTelChange = this.handleTelChange.bind(this)\n    this.handleAssuntoChange = this.handleAssuntoChange.bind(this)\n    this.handleMesageChange = this.handleMesageChange.bind(this)\n\n    this.state = {\n      name: '',\n      email: '',\n      tel: '',\n      assunto: '',\n      mensagem: ''\n    };\n    (async () => {\n      const res = await axios.get('http://localhost:3000/contato', {\n      }).then(function (response) {\n        console.log(response.data)\n        console.log(response.status)\n      })\n    })()\n  }\n\n\n  handleNameChange(event) {\n    this.setState({ name: event.target.value });\n  }\n\n  handleEmailChange(event) {\n    this.setState({ email: event.target.value });\n  }\n  handleAssuntoChange(event) {\n    this.setState({ assunto: event.target.value });\n  }\n\n  handleMesageChange(event) {\n    this.setState({ mensagem: event.target.value });\n  }\n\n  handleTelChange(event) {\n    this.setState({ tel: event.target.value });\n  }\n\n\n  sendEmail() {\n    const nome = this.state.name;\n    const email = this.state.email;\n    const tel = this.state.tel;\n    const assunto = this.state.assunto;\n    const mensagem = this.state.mensagem;\n    (async () => {\n      const res = await axios.post('http://localhost:3000/contato', {\n        nome: nome,\n        email: email,\n        tel: tel,\n        assunto: assunto,\n        mensagem: mensagem\n      }).then(function (response) {\n        if (response.status === 200) { alert(\"Enviado com sucesso\") }\n        else { alert(\"Erro ao enviar, tente novamente mais tarde\"+ response.status) }\n      })\n    })()\n  }\n\n  render() {\n    const mystyle = {\n      backgroundImage: 'url(' + logo + ')',\n      backgroundSize: 'cover',\n      width: '100%',\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n    }\n    return (\n      <>\n        <div style={mystyle}>\n          <div className=\"back-fade\">\n            <div className=\"coluna\" id=\"form-contato\">\n              <h1>Contato</h1>\n              <div className=\"linha\">\n                <div id=\"id-contato\" className=\"coluna id\">\n                  <input name=\"nome\" placeholder=\"Nome\" onChange={this.handleNameChange} value={this.state.name} />\n                  <input name=\"email\" placeholder=\"E-mail\" type='email' onChange={this.handleEmailChange} value={this.state.email} />\n                  <input name=\"telefone\" placeholder=\"Telefone\" type='tel' onChange={this.handleTelChange} value={this.state.Tel} />\n\n                  <input name=\"assunto\" placeholder=\"Assunto\" onChange={this.handleAssuntoChange} value={this.state.assunto} />\n                </div>\n                <div id=\"mes-contato\" className=\"coluna\">\n                  <textarea name=\"mensagem\" placeholder=\"Mensagem\" cols=\"50\" rows=\"11\" onChange={this.handleMesageChange} value={this.state.mensagem}></textarea>\n                  <button id=\"button-contato\" onClick={this.sendEmail}>Enviar</button>\n                </div>\n              </div>\n              <div className=\"coluna\" id=\"contato-info\">\n                <small>@media</small>\n                <small>phone</small>\n                <small>email</small>\n                <small>endere√ßo</small>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}